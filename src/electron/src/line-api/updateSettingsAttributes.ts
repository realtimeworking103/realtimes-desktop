import http2 from "http2";
import { lineconfig } from "../config/line-config.js";

export async function updateSettingsAttributes1(acessToken: string) {
  return new Promise<void>((resolve, reject) => {
    const payload = Buffer.from([
      0x82, 0x21, 0x01, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
      0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
      0x75, 0x74, 0x65, 0x73, 0x32, 0x15, 0xc2, 0x3e, 0x2c, 0xa2, 0x16, 0x00,
      0x12, 0x12, 0x12, 0x11, 0x32, 0x12, 0x12, 0x11, 0x12, 0x12, 0x11, 0x12,
      0x12, 0x12, 0x12, 0x11, 0xe2, 0x32, 0x22, 0x12, 0xc2, 0x12, 0x12, 0x22,
      0x16, 0x00, 0x16, 0x00, 0x12, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x12,
      0x16, 0x00, 0x26, 0x00, 0x16, 0x00, 0x16, 0x00, 0x26, 0x00, 0x16, 0x00,
      0x26, 0x00, 0x16, 0x00, 0x36, 0x00, 0x16, 0x00, 0x22, 0x16, 0x00, 0x12,
      0x12, 0x12, 0x16, 0x00, 0x12, 0x16, 0x00, 0x11, 0x11, 0x11, 0x11, 0x26,
      0x00, 0x16, 0x00, 0x12, 0x16, 0x00, 0x22, 0x16, 0x00, 0x12, 0x16, 0x00,
      0x26, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00,
      0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x26, 0x00, 0x21, 0x11, 0x11, 0x11,
      0x00, 0x1a, 0x15, 0x0e, 0x00,
    ]);

    const client = http2.connect(lineconfig.URL_LINE);

    const req = client.request({
      ":method": "POST",
      ":path": "/S4",
      "User-Agent": "Line/13.1.0",
      "X-Line-Access": acessToken,
      "X-Line-Application": "ANDROID\t13.1.0\tAndroid OS\t9",
      "X-Lal": "th_TH",
      "X-Lpv": "1",
      "Content-Type": "application/x-thrift",
      "Accept-Encoding": "gzip, deflate, br",
    });

    req.on("response", (headers) => {
      console.log("Response Headers:");
      for (const name in headers) {
        console.log(`${name}: ${headers[name]}`);
      }
    });

    req.on("data", (chunk) => {
      console.log(
        `Response Body UpdateSettingsAttributes1 :`,
        chunk.toString(),
      );
    });

    req.on("end", () => {
      console.log("Request finished");
      client.close();
      resolve();
    });

    req.on("error", (err) => {
      client.close();
      reject(err);
    });

    req.write(payload);

    req.end();
  });
}

export async function updateSettingsAttributes2(acessToken: string) {
  return new Promise<void>((resolve, reject) => {
    const payload = Buffer.from([
      0x82, 0x21, 0x01, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
      0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
      0x75, 0x74, 0x65, 0x73, 0x32, 0x15, 0xc4, 0x3e, 0x2c, 0xa2, 0x16, 0x00,
      0x12, 0x12, 0x12, 0x11, 0x32, 0x12, 0x11, 0x12, 0x12, 0x12, 0x11, 0x12,
      0x12, 0x12, 0x12, 0x11, 0xe2, 0x32, 0x22, 0x12, 0xc2, 0x12, 0x12, 0x22,
      0x16, 0x00, 0x16, 0x00, 0x12, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x12,
      0x16, 0x00, 0x26, 0x00, 0x16, 0x00, 0x16, 0x00, 0x26, 0x00, 0x16, 0x00,
      0x26, 0x00, 0x16, 0x00, 0x36, 0x00, 0x16, 0x00, 0x22, 0x16, 0x00, 0x12,
      0x12, 0x12, 0x16, 0x00, 0x12, 0x16, 0x00, 0x11, 0x11, 0x11, 0x11, 0x26,
      0x00, 0x16, 0x00, 0x12, 0x16, 0x00, 0x22, 0x16, 0x00, 0x12, 0x16, 0x00,
      0x26, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00,
      0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x26, 0x00, 0x21, 0x11, 0x11, 0x11,
      0x00, 0x1a, 0x15, 0x0c, 0x00,
    ]);

    const client = http2.connect(lineconfig.URL_LINE);

    const req = client.request({
      ":method": "POST",
      ":path": "/S4",
      "User-Agent": "Line/13.1.0",
      "X-Line-Access": acessToken,
      "X-Line-Application": "ANDROID\t13.1.0\tAndroid OS\t9",
      "X-Lal": "th_TH",
      "X-Lpv": "1",
      "Content-Type": "application/x-thrift",
      "Accept-Encoding": "gzip, deflate, br",
    });

    req.on("response", (headers) => {
      console.log("Response Headers:");
      for (const name in headers) {
        console.log(`${name}: ${headers[name]}`);
      }
    });

    req.on("data", (chunk) => {
      console.log(
        `Response Body UpdateSettingsAttributes2 :`,
        chunk.toString(),
      );
    });

    req.on("end", () => {
      console.log("Request finished");
      client.close();
      resolve();
    });

    req.on("error", (err) => {
      client.close();
      reject(err);
    });

    req.write(payload);

    req.end();
  });
}
